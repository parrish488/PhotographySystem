@model PhotgraphyMVC.Models.Mileage

@{
    ViewBag.Title = "Add Mileage";
}

<h2>Add New Mileage</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.MileageDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MileageDate,
                    new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MileageDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ClientID, "Client", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ClientID", (IEnumerable<SelectListItem>)ViewData["Client"], "--Select Client--", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TaxYearID, "Tax Year", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("TaxYearID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TaxYearID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MilesDriven, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MilesDriven, new { htmlAttributes = new { @class = "form-control", @id = "milesDriven" } })
                    @Html.ValidationMessageFor(model => model.MilesDriven, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Source, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Source, new { htmlAttributes = new { @class = "form-control", @id = "source" } })
                    @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <span id="startLabel" style="font-weight:bold">Double Click or Enter Starting Point</span><input id="startPoint" type="text" class="form-control" autocomplete="off" />
            </div>
            <div class="form-group">
                <span id="destinationLabel" style="font-weight:bold">Destination</span><input id="destination" type="text" class="form-control" autocomplete="off" />
            </div>
            <div class="form-group">
                <div class="checkbox">
                    <label id="roundTripLabel" style="font-weight:bold"><input id="roundTrip" type="checkbox" />Round Trip</label>
                </div>
            </div>
            <div class="form-group">
                <input id="mapData" type="button" value="Map It!" class="btn btn-default" />
            </div>

            <div id="map_canvas" style="width: 640px; height: 480px;">
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<p>
    Double click to place start and end points on the map.  You may place as many points as needed.  If desired, the address may be entered instead.
</p>

@section scripts {
    <script type="text/javascript">
        $(function () {
            $('#MileageDate').datetimepicker({
                defaultDate: '@DateTime.Now',
                format: 'LLLL',
                showClose: true,
                showClear: true,
                toolbarPlacement: 'top',
                stepping: 15
            });
        });
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places&key=AIzaSyC_UXX1o8ch7f2SW59JFcRTcVcXXFVbjT0"></script>
@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC_UXX1o8ch7f2SW59JFcRTcVcXXFVbjT0&libraries=places"
    async defer></script>*@
    <script>
        var directionsService = new google.maps.DirectionsService();
        var _mapPoints = new Array();
        var _directionsRenderer = '';
        var mapOptions = {
                center: new google.maps.LatLng(40.721088, -111.904483),
                zoom: 8,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            var map = new google.maps.Map(document.getElementById("map_canvas"),
              mapOptions);

        $(document).ready(function () {
            $('#mapData').click(function () {
                var startPoint = document.getElementById("startPoint").value;
                var destination = document.getElementById("destination").value;

                var geocoder = new google.maps.Geocoder();
                geocoder.geocode({ 'address': startPoint }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        map.setCenter(results[0].geometry.location);
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location
                        });

                        _mapPoints.push(results[0].geometry.location);
                        getRoutePointsAndWaypoints();
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });

                geocoder.geocode({ 'address': destination }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        map.setCenter(results[0].geometry.location);
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location
                        });

                        _mapPoints.push(results[0].geometry.location);
                        getRoutePointsAndWaypoints();
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });
            });

            $('#roundTrip').click(function () {
                if (document.getElementById("roundTrip").checked) {
                    document.getElementById("milesDriven").value *= 2;
                }
                else if (!document.getElementById("roundTrip").checked && document.getElementById("milesDriven").value > 0) {
                    document.getElementById("milesDriven").value /= 2;
                }

            });
        });

        //$(document).ready(function () {
        //    initialize();
        //});

        function initialize() {
            _directionsRenderer = new google.maps.DirectionsRenderer();

            _directionsRenderer.setMap(map);

            //Set different options for DirectionsRenderer mehtods.
            //draggable option will used to drag the route.
            _directionsRenderer.setOptions({
                draggable: true
            });

            ////Add the double click event to map.
            //google.maps.event.addListener(map, "dblclick", function (event) {
            //    //Check if Avg Speed value is enter.
            //    if ($("#txtAvgSpeed").val() == '') {
            //        alert("Please enter the Average Speed (km/hr).");
            //        $("#txtAvgSpeed").focus();
            //        return false;
            //    }

            //    var geocoder = new google.maps.Geocoder;
            //    var input = event.latLng.lat() + "," + event.latLng.lng();
            //    var latlngStr = input.split(',');
            //    var latlng = { lat: parseFloat(latlngStr[0]), lng: parseFloat(latlngStr[1]) };
            //    geocoder.geocode({ 'location': latlng }, function (results, status) {
            //        if (status === google.maps.GeocoderStatus.OK) {
            //            if (results[1]) {
            //                if (_mapPoints.length == 1) {
            //                    document.getElementById("startPoint").value = results[1].formatted_address;
            //                    document.getElementById("startLabel").innerHTML = "Start Point";
            //                    document.getElementById("destinationLabel").innerHTML = "Double Click or Enter Destination";
            //                }
            //                else {
            //                    document.getElementById("destination").value = results[1].formatted_address;
            //                    document.getElementById("startLabel").innerHTML = "Start Point";
            //                    document.getElementById("destinationLabel").innerHTML = "Destination";
            //                }
            //            }
            //        }
            //    });

            //    var _currentPoints = event.latLng;
            //    _mapPoints.push(_currentPoints);
            //    getRoutePointsAndWaypoints();
            //});

            ////Add an event to route direction. This will fire when the direction is changed.
            //google.maps.event.addListener(_directionsRenderer, 'directions_changed', function () {
            //    window.alert(computeTotalDistanceforRoute(_directionsRenderer.directions));
            //});

            var defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(40.721088, -111.904483)
                );

            var origin_input = document.getElementById('startPoint');
            var destination_input = document.getElementById('destination');


            var options = {
                bounds: defaultBounds,
                componentRestrictions: {country: 'us'}
            };

            var autocomplete_origin = new google.maps.places.Autocomplete(origin_input, options);    
            var autocomplete_destination = new google.maps.places.Autocomplete(destination_input, options);
        }

        google.maps.event.addDomListener(window, 'load', initialize);

        //getRoutePointsAndWaypoints() will help you to pass points and waypoints to drawRoute() function
        function getRoutePointsAndWaypoints() {
            //Define a variable for waypoints.
            var _waypoints = new Array();

            if (_mapPoints.length > 2) //Waypoints will be come.
            {
                for (var j = 1; j < _mapPoints.length - 1; j++) {
                    var address = _mapPoints[j];
                    if (address !== "") {
                        _waypoints.push({
                            location: address,
                            stopover: true  //stopover is used to show marker on map for waypoints
                        });
                    }
                }
                //Call a drawRoute() function
                drawRoute(_mapPoints[0], _mapPoints[_mapPoints.length - 1], _waypoints);
            } else if (_mapPoints.length > 1) {
                //Call a drawRoute() function only for start and end locations
                drawRoute(_mapPoints[_mapPoints.length - 2], _mapPoints[_mapPoints.length - 1], _waypoints);
            } else {
                //Call a drawRoute() function only for one point as start and end locations.
                drawRoute(_mapPoints[_mapPoints.length - 1], _mapPoints[_mapPoints.length - 1], _waypoints);
            }
        }

        function drawRoute(originAddress, destinationAddress, _waypoints) {
            //Define a request variable for route .
            var _request = '';

            //This is for more then two locatins
            if (_waypoints.length > 0) {
                _request = {
                    origin: originAddress,
                    destination: destinationAddress,
                    waypoints: _waypoints, //an array of waypoints
                    optimizeWaypoints: true, //set to true if you want google to determine the shortest route or false to use the order specified.
                    travelMode: google.maps.DirectionsTravelMode.DRIVING
                };
            } else {
                //This is for one or two locations. Here noway point is used.
                _request = {
                    origin: originAddress,
                    destination: destinationAddress,
                    travelMode: google.maps.DirectionsTravelMode.DRIVING
                };
            }

            //This will take the request and draw the route and return response and status as output
            directionsService.route(_request, function (_response, _status) {
                if (_status == google.maps.DirectionsStatus.OK) {
                    _directionsRenderer.setDirections(_response);

                    var totalDistance = 0;
                    var legs = _response.routes[0].legs;
                    for (var i = 0; i < legs.length; ++i) {
                        totalDistance += legs[i].distance.value;
                    }

                    totalDistance = totalDistance * 0.000621371;
                    if (document.getElementById("roundTrip").checked)
                    {
                        totalDistance *= 2;
                    }

                    document.getElementById("milesDriven").value = totalDistance;
                    document.getElementById("source").value = "Google Maps";
                }
            });
        }
    </script>

}
